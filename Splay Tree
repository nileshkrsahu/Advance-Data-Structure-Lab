/*Nilesh Kuar Sahu
MT/CS/10002/2018*/
#include<stdio.h>
#include<stdlib.h>

struct node
{
	int key;
	struct node *left, *right;
};

struct node* newNode(int key)
{
	struct node* node = (struct node*)malloc(sizeof(struct node));
	node->key = key;
	node->left = node->right = NULL;
	return (node);
}

struct node *rightRotate(struct node *x)
{
	struct node *y = x->left;
	x->left = y->right;
	y->right = x;
	return y;
}

struct node *leftRotate(struct node *x)
{
	struct node *y = x->right;
	x->right = y->left;
	y->left = x;
	return y;
}

struct node *splay(struct node *root, int key)
{
	if (root == NULL || root->key == key)
		return root;

	if (root->key > key)
	{

		if (root->left == NULL) return root;

		if (root->left->key > key)
		{

			root->left->left = splay(root->left->left, key);

			root = rightRotate(root);
		}
		else if (root->left->key < key)
		{
			root->left->right = splay(root->left->right, key);

			if (root->left->right != NULL)
				root->left = leftRotate(root->left);
		}

		return (root->left == NULL)? root: rightRotate(root);
	}
	else
	{
		if (root->right == NULL) return root;

		if (root->right->key > key)
		{
			root->right->left = splay(root->right->left, key);

			if (root->right->left != NULL)
				root->right = rightRotate(root->right);
		}
		else if (root->right->key < key)
		{
			root->right->right = splay(root->right->right, key);
			root = leftRotate(root);
		}


		return (root->right == NULL)? root: leftRotate(root);
	}
}

struct node *insert(struct node *root, int k)
{

    if (root == NULL) return newNode(k);

    if (root->key == k) return root;

    struct node *newnode  = newNode(k);

    if (root->key > k)
    {
        newnode->right = root;
        newnode->left = root->left;
        root->left = NULL;
    }

    else
    {
        newnode->left = root;
        newnode->right = root->right;
        root->right = NULL;
    }

    return newnode;
}

struct node *search(struct node *root, int key)
{
	return splay(root, key);
}

void preOrder(struct node *root)
{
	if (root != NULL)
	{
		printf("%d ", root->key);
		preOrder(root->left);
		preOrder(root->right);
	}
}

int main()
{
    int x,y;
    struct node *root = NULL;

	while(1==1)
    {
        printf("\nEnter 1 to Search, 2 to Insert, 0 to Exit: ");
	scanf("%d",&x);
	switch(x)
	{
    case 1:
        {
            printf("\nEnter No. to Search: \n");
            scanf("%d",&y);
            root = search(root, y);
            printf("\nPreorder traversal of the Splay tree is:\n");
            preOrder(root);
        }
        break;
        case 2:
            {
            printf("\nEnter No. to Insert: \n");
            scanf("%d",&y);
            root = insert(root, y);
            printf("\nPreorder traversal of the Splay tree is:\n");
            preOrder(root);
            }
            break;
            case 0: exit(0);
            default: printf("\nINVALID I/P \n");
	}
}
	return 0;
}
